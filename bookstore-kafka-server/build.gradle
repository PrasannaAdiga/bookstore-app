buildscript {
	repositories {
		maven {
			url "http://packages.confluent.io/maven/"
		}
	}
	dependencies {
		classpath "io.confluent:kafka-avro-serializer:6.0.0"
	}
}

plugins {
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id 'java'
	id "com.github.davidmc24.gradle.plugin.avro" version "1.0.0"
}

group = 'com.learning.bookstore'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Hoxton.SR10")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'

	implementation 'org.springframework.kafka:spring-kafka'

	implementation 'net.logstash.logback:logstash-logback-encoder:6.6'

	implementation 'org.apache.avro:avro:1.10.1'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.kafka:spring-kafka-test'
}

def generateAvro = tasks.register("generateAvro", com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask) {
	source("src/main/resources/avro")
	outputDir = file("src/main/java")
}

tasks.named("compileJava").configure {
	source(generateAvro)
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

bootJar {
	enabled = false
}

jar {
	enabled = true
}