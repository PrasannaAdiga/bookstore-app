/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.learning.bookstore.model.product;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Product extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1752340844201190064L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Product\",\"namespace\":\"com.learning.bookstore.model.product\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"imageId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"availableCount\",\"type\":\"int\"},{\"name\":\"category\",\"type\":{\"type\":\"record\",\"name\":\"ProductCategory\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Product> ENCODER =
      new BinaryMessageEncoder<Product>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Product> DECODER =
      new BinaryMessageDecoder<Product>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Product> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Product> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Product> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Product>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Product to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Product from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Product instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Product fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String description;
  @Deprecated public double price;
  @Deprecated public java.lang.String imageId;
  @Deprecated public int availableCount;
  @Deprecated public com.learning.bookstore.model.product.ProductCategory category;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Product() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param description The new value for description
   * @param price The new value for price
   * @param imageId The new value for imageId
   * @param availableCount The new value for availableCount
   * @param category The new value for category
   */
  public Product(java.lang.String name, java.lang.String description, java.lang.Double price, java.lang.String imageId, java.lang.Integer availableCount, com.learning.bookstore.model.product.ProductCategory category) {
    this.name = name;
    this.description = description;
    this.price = price;
    this.imageId = imageId;
    this.availableCount = availableCount;
    this.category = category;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return description;
    case 2: return price;
    case 3: return imageId;
    case 4: return availableCount;
    case 5: return category;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = value$ != null ? value$.toString() : null; break;
    case 1: description = value$ != null ? value$.toString() : null; break;
    case 2: price = (java.lang.Double)value$; break;
    case 3: imageId = value$ != null ? value$.toString() : null; break;
    case 4: availableCount = (java.lang.Integer)value$; break;
    case 5: category = (com.learning.bookstore.model.product.ProductCategory)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'imageId' field.
   * @return The value of the 'imageId' field.
   */
  public java.lang.String getImageId() {
    return imageId;
  }


  /**
   * Sets the value of the 'imageId' field.
   * @param value the value to set.
   */
  public void setImageId(java.lang.String value) {
    this.imageId = value;
  }

  /**
   * Gets the value of the 'availableCount' field.
   * @return The value of the 'availableCount' field.
   */
  public int getAvailableCount() {
    return availableCount;
  }


  /**
   * Sets the value of the 'availableCount' field.
   * @param value the value to set.
   */
  public void setAvailableCount(int value) {
    this.availableCount = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public com.learning.bookstore.model.product.ProductCategory getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(com.learning.bookstore.model.product.ProductCategory value) {
    this.category = value;
  }

  /**
   * Creates a new Product RecordBuilder.
   * @return A new Product RecordBuilder
   */
  public static com.learning.bookstore.model.product.Product.Builder newBuilder() {
    return new com.learning.bookstore.model.product.Product.Builder();
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Product RecordBuilder
   */
  public static com.learning.bookstore.model.product.Product.Builder newBuilder(com.learning.bookstore.model.product.Product.Builder other) {
    if (other == null) {
      return new com.learning.bookstore.model.product.Product.Builder();
    } else {
      return new com.learning.bookstore.model.product.Product.Builder(other);
    }
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Product instance.
   * @param other The existing instance to copy.
   * @return A new Product RecordBuilder
   */
  public static com.learning.bookstore.model.product.Product.Builder newBuilder(com.learning.bookstore.model.product.Product other) {
    if (other == null) {
      return new com.learning.bookstore.model.product.Product.Builder();
    } else {
      return new com.learning.bookstore.model.product.Product.Builder(other);
    }
  }

  /**
   * RecordBuilder for Product instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Product>
    implements org.apache.avro.data.RecordBuilder<Product> {

    private java.lang.String name;
    private java.lang.String description;
    private double price;
    private java.lang.String imageId;
    private int availableCount;
    private com.learning.bookstore.model.product.ProductCategory category;
    private com.learning.bookstore.model.product.ProductCategory.Builder categoryBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.learning.bookstore.model.product.Product.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.imageId)) {
        this.imageId = data().deepCopy(fields()[3].schema(), other.imageId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.availableCount)) {
        this.availableCount = data().deepCopy(fields()[4].schema(), other.availableCount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.category)) {
        this.category = data().deepCopy(fields()[5].schema(), other.category);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasCategoryBuilder()) {
        this.categoryBuilder = com.learning.bookstore.model.product.ProductCategory.newBuilder(other.getCategoryBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Product instance
     * @param other The existing instance to copy.
     */
    private Builder(com.learning.bookstore.model.product.Product other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.imageId)) {
        this.imageId = data().deepCopy(fields()[3].schema(), other.imageId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.availableCount)) {
        this.availableCount = data().deepCopy(fields()[4].schema(), other.availableCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.category)) {
        this.category = data().deepCopy(fields()[5].schema(), other.category);
        fieldSetFlags()[5] = true;
      }
      this.categoryBuilder = null;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder setDescription(java.lang.String value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder setPrice(double value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder clearPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'imageId' field.
      * @return The value.
      */
    public java.lang.String getImageId() {
      return imageId;
    }


    /**
      * Sets the value of the 'imageId' field.
      * @param value The value of 'imageId'.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder setImageId(java.lang.String value) {
      validate(fields()[3], value);
      this.imageId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'imageId' field has been set.
      * @return True if the 'imageId' field has been set, false otherwise.
      */
    public boolean hasImageId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'imageId' field.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder clearImageId() {
      imageId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'availableCount' field.
      * @return The value.
      */
    public int getAvailableCount() {
      return availableCount;
    }


    /**
      * Sets the value of the 'availableCount' field.
      * @param value The value of 'availableCount'.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder setAvailableCount(int value) {
      validate(fields()[4], value);
      this.availableCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'availableCount' field has been set.
      * @return True if the 'availableCount' field has been set, false otherwise.
      */
    public boolean hasAvailableCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'availableCount' field.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder clearAvailableCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public com.learning.bookstore.model.product.ProductCategory getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder setCategory(com.learning.bookstore.model.product.ProductCategory value) {
      validate(fields()[5], value);
      this.categoryBuilder = null;
      this.category = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'category' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.learning.bookstore.model.product.ProductCategory.Builder getCategoryBuilder() {
      if (categoryBuilder == null) {
        if (hasCategory()) {
          setCategoryBuilder(com.learning.bookstore.model.product.ProductCategory.newBuilder(category));
        } else {
          setCategoryBuilder(com.learning.bookstore.model.product.ProductCategory.newBuilder());
        }
      }
      return categoryBuilder;
    }

    /**
     * Sets the Builder instance for the 'category' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.learning.bookstore.model.product.Product.Builder setCategoryBuilder(com.learning.bookstore.model.product.ProductCategory.Builder value) {
      clearCategory();
      categoryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'category' field has an active Builder instance
     * @return True if the 'category' field has an active Builder instance
     */
    public boolean hasCategoryBuilder() {
      return categoryBuilder != null;
    }

    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public com.learning.bookstore.model.product.Product.Builder clearCategory() {
      category = null;
      categoryBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Product build() {
      try {
        Product record = new Product();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.String) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.lang.Double) defaultValue(fields()[2]);
        record.imageId = fieldSetFlags()[3] ? this.imageId : (java.lang.String) defaultValue(fields()[3]);
        record.availableCount = fieldSetFlags()[4] ? this.availableCount : (java.lang.Integer) defaultValue(fields()[4]);
        if (categoryBuilder != null) {
          try {
            record.category = this.categoryBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("category"));
            throw e;
          }
        } else {
          record.category = fieldSetFlags()[5] ? this.category : (com.learning.bookstore.model.product.ProductCategory) defaultValue(fields()[5]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Product>
    WRITER$ = (org.apache.avro.io.DatumWriter<Product>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Product>
    READER$ = (org.apache.avro.io.DatumReader<Product>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.description);

    out.writeDouble(this.price);

    out.writeString(this.imageId);

    out.writeInt(this.availableCount);

    this.category.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString();

      this.description = in.readString();

      this.price = in.readDouble();

      this.imageId = in.readString();

      this.availableCount = in.readInt();

      if (this.category == null) {
        this.category = new com.learning.bookstore.model.product.ProductCategory();
      }
      this.category.customDecode(in);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString();
          break;

        case 1:
          this.description = in.readString();
          break;

        case 2:
          this.price = in.readDouble();
          break;

        case 3:
          this.imageId = in.readString();
          break;

        case 4:
          this.availableCount = in.readInt();
          break;

        case 5:
          if (this.category == null) {
            this.category = new com.learning.bookstore.model.product.ProductCategory();
          }
          this.category.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










